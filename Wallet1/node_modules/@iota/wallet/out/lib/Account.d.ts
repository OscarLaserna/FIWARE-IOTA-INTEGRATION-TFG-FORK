import type { MessageHandler } from './MessageHandler';
import type { Balance, AccountMetadata, SyncOptions, AccountMeta, Address, SendParams, SendNativeTokensParams, SendNftParams, AddressWithUnspentOutputs, AliasOutputParams, FilterOptions, GenerateAddressOptions, CreateNativeTokenTransaction, CreateNativeTokenParams, MintNftParams, Node, OutputData, OutputParams, OutputsToClaim, PreparedTransactionData, Transaction, TransactionOptions, ParticipationOverview, ParticipationEventId, ParticipationEventStatus, ParticipationEventType, ParticipationEventWithNodes, ParticipationEventRegistrationOptions, ParticipationEventMap, GenerateAddressesOptions, Secp256k1EcdsaSignature, Ed25519Signature, ConsolidationParams, Bip44 } from '../types';
import type { SignedTransactionEssence } from '../types/signedTransactionEssence';
import type { BuildAliasOutputData, BuildBasicOutputData, BuildFoundryOutputData, BuildNftOutputData } from '../types/buildOutputData';
import type { HexEncodedAmount, HexEncodedString, IAliasOutput, IBasicOutput, IFoundryOutput, INftOutput, OutputTypes } from '@iota/types';
/** The Account class. */
export declare class Account {
    private meta;
    private messageHandler;
    constructor(accountMeta: AccountMeta, messageHandler: MessageHandler);
    /**
     * Build an `AliasOutput`.
     * @param data Options for building an `AliasOutput`.
     * @returns The built `AliasOutput`.
     */
    buildAliasOutput(data: BuildAliasOutputData): Promise<IAliasOutput>;
    /**
     * Build a `BasicOutput`.
     * @param data Options for building a `BasicOutput`.
     * @returns The built `BasicOutput`.
     */
    buildBasicOutput(data: BuildBasicOutputData): Promise<IBasicOutput>;
    /**
     * Build a `FoundryOutput`.
     * @param data Options for building a `FoundryOutput`.
     * @returns The built `FoundryOutput`.
     */
    buildFoundryOutput(data: BuildFoundryOutputData): Promise<IFoundryOutput>;
    /**
     * Build an `NftOutput`.
     * @param data Options for building an `NftOutput`.
     * @returns The built `NftOutput`.
     */
    buildNftOutput(data: BuildNftOutputData): Promise<INftOutput>;
    /**
     * Burn native tokens. This doesn't require the foundry output which minted them, but will not increase
     * the foundries `melted_tokens` field, which makes it impossible to destroy the foundry output. Therefore it's
     * recommended to use melting, if the foundry output is available.
     * @param tokenId The native token id.
     * @param burnAmount The to be burned amount.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The transaction.
     */
    burnNativeToken(tokenId: string, burnAmount: HexEncodedAmount, transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Burn an nft output
     * @param nftId The NftId.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The transaction.
     */
    burnNft(nftId: string, transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Claim basic or nft outputs that have additional unlock conditions
     * to their `AddressUnlockCondition` from the account.
     * @param outputIds The outputs to claim.
     * @returns The resulting transaction.
     */
    claimOutputs(outputIds: string[]): Promise<Transaction>;
    /**
     * Consolidate basic outputs with only an `AddressUnlockCondition` from an account
     * by sending them to an own address again if the output amount is greater or
     * equal to the output consolidation threshold.
     * @param params The consolidation parameters.
     * @returns The consolidation transaction.
     */
    consolidateOutputs(params: ConsolidationParams): Promise<Transaction>;
    /**
     * `createAliasOutput` creates an alias output
     * @param params The alias output options.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns A transaction object.
     */
    createAliasOutput(params?: AliasOutputParams, transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Melt native tokens. This happens with the foundry output which minted them, by increasing its
     * `melted_tokens` field.
     * @param tokenId The native token id.
     * @param meltAmount To be melted amount.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The transaction.
     */
    meltNativeToken(tokenId: string, meltAmount: HexEncodedAmount, transactionOptions?: TransactionOptions): Promise<Transaction>;
    deregisterParticipationEvent(eventId: ParticipationEventId): Promise<void>;
    /**
     * Destroy an alias output.
     * @param aliasId The AliasId.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The transaction.
     */
    destroyAlias(aliasId: string, transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Function to destroy a foundry output with a circulating supply of 0.
     * Native tokens in the foundry (minted by other foundries) will be transactioned to the controlling alias.
     * @param foundryId The FoundryId.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The transaction.
     */
    destroyFoundry(foundryId: string, transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Generate a new unused address.
     * @param options Options for address generation.
     * @returns The address.
     */
    generateEd25519Address(options?: GenerateAddressOptions): Promise<Address>;
    /**
     * Generate new unused addresses.
     * @param amount The amount of addresses to generate.
     * @param options Options for address generation.
     * @returns The addresses.
     */
    generateEd25519Addresses(amount: number, options?: GenerateAddressOptions): Promise<Address[]>;
    /** Generate EVM addresses */
    generateEvmAddresses(generateAddressesOptions: GenerateAddressesOptions): Promise<string[]>;
    /**
     * Verifies an ed25519 signature against a message.
     */
    verifyEd25519Signature(signature: Ed25519Signature, message: HexEncodedString): Promise<boolean>;
    /**
     * Verifies a Secp256k1Ecdsa signature against a message.
     */
    verifySecp256k1EcdsaSignature(signature: Secp256k1EcdsaSignature, message: HexEncodedString): Promise<boolean>;
    /**
     * Signs a message with a Secp256k1Ecdsa private key.
     */
    signSecp256k1Ecdsa(message: HexEncodedString, chain: Bip44): Promise<Secp256k1EcdsaSignature>;
    /**
     * Get the account balance.
     * @returns The account balance.
     */
    getBalance(): Promise<Balance>;
    /**
     * Get the data for an output.
     * @param outputId The output to get.
     * @returns The `OutputData`.
     */
    getOutput(outputId: string): Promise<OutputData>;
    getParticipationEvent(eventId: ParticipationEventId): Promise<ParticipationEventWithNodes>;
    getParticipationEventIds(node: Node, eventType?: ParticipationEventType): Promise<ParticipationEventId[]>;
    getParticipationEvents(): Promise<ParticipationEventMap>;
    getParticipationEventStatus(eventId: ParticipationEventId): Promise<ParticipationEventStatus>;
    /**
     * Get a `FoundryOutput` by native token ID. It will try to get the foundry from
     * the account, if it isn't in the account it will try to get it from the node.
     * @param tokenId The native token ID to get the foundry for.
     * @returns The `FoundryOutput` that minted the token.
     */
    getFoundryOutput(tokenId: string): Promise<IFoundryOutput>;
    /**
     * Get outputs with additional unlock conditions.
     * @param outputs The type of outputs to claim.
     * @returns The output IDs of the unlockable outputs.
     */
    claimableOutputs(outputs: OutputsToClaim): Promise<string[]>;
    /**
     * Get a transaction stored in the account.
     * @param transactionId The ID of the transaction to get.
     * @returns The transaction.
     */
    getTransaction(transactionId: string): Promise<Transaction>;
    /**
     * Get the transaction with inputs of an incoming transaction stored in the account
     * List might not be complete, if the node pruned the data already
     * @param transactionId The ID of the transaction to get.
     * @returns The transaction.
     */
    getIncomingTransaction(transactionId: string): Promise<Transaction>;
    /**
     * List all the addresses of the account.
     * @returns The addresses.
     */
    addresses(): Promise<Address[]>;
    /**
     * List the addresses of the account with unspent outputs.
     * @returns The addresses.
     */
    addressesWithUnspentOutputs(): Promise<AddressWithUnspentOutputs[]>;
    /**
     * List all outputs of the account.
     * @param filterOptions Options to filter the to be returned outputs.
     * @returns The outputs with metadata.
     */
    outputs(filterOptions?: FilterOptions): Promise<OutputData[]>;
    /**
     * List all the pending transactions of the account.
     * @returns The transactions.
     */
    pendingTransactions(): Promise<Transaction[]>;
    /**
     * List all incoming transactions of the account.
     * @returns The incoming transactions with their inputs.
     */
    incomingTransactions(): Promise<[string, Transaction][]>;
    /**
     * List all the transactions of the account.
     * @returns The transactions.
     */
    transactions(): Promise<Transaction[]>;
    /**
     * List all the unspent outputs of the account.
     * @param filterOptions Options to filter the to be returned outputs.
     * @returns The outputs with metadata.
     */
    unspentOutputs(filterOptions?: FilterOptions): Promise<OutputData[]>;
    /**
     * Get the accounts metadata.
     * @returns The accounts metadata.
     */
    getMetadata(): AccountMetadata;
    /**
     * Calculate the minimum required storage deposit for an output.
     * @param output output to calculate the deposit amount for.
     * @returns The amount.
     */
    minimumRequiredStorageDeposit(output: OutputTypes): Promise<string>;
    /**
     * Mint additional native tokens.
     * @param tokenId The native token id.
     * @param mintAmount To be minted amount.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The minting transaction.
     */
    mintNativeToken(tokenId: string, mintAmount: HexEncodedAmount, transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Create a native token.
     * @param params The options for creating the token.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The creating transaction and the token ID.
     */
    createNativeToken(params: CreateNativeTokenParams, transactionOptions?: TransactionOptions): Promise<CreateNativeTokenTransaction>;
    /**
     * Mint nfts.
     * @param params The options for minting nfts.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The minting transaction.
     */
    mintNfts(params: MintNftParams[], transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Prepare an output for sending, useful for offline signing.
     * @param options The options for preparing an output. If the amount is
     * below the minimum required storage deposit, by default the remaining
     * amount will automatically be added with a `StorageDepositReturn` `UnlockCondition`,
     * when setting the `ReturnStrategy` to `gift`, the full minimum required
     * storage deposit will be sent to the recipient. When the assets contain
     * an nft id, the data from the existing `NftOutput` will be used, just with
     * the address unlock conditions replaced.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The prepared output.
     */
    prepareOutput(params: OutputParams, transactionOptions?: TransactionOptions): Promise<OutputTypes>;
    /**
     * Prepare a send transaction, useful for offline signing.
     * @param params Address with amounts to send.
     * @param options The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The prepared transaction data.
     */
    prepareSend(params: SendParams[], options?: TransactionOptions): Promise<PreparedTransactionData>;
    /**
     * Prepare a transaction, useful for offline signing.
     * @param outputs Outputs to use in the transaction.
     * @param options The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The prepared transaction data.
     */
    prepareTransaction(outputs: OutputTypes[], options?: TransactionOptions): Promise<PreparedTransactionData>;
    registerParticipationEvents(options: ParticipationEventRegistrationOptions): Promise<ParticipationEventMap>;
    /**
     * Request funds from a faucet.
     */
    requestFundsFromFaucet(url: string, address: string): Promise<string>;
    /**
     * Retries (promotes or reattaches) a transaction sent from the account for a provided transaction id until it's
     * included (referenced by a milestone). Returns the included block id.
     */
    retryTransactionUntilIncluded(transactionId: string, interval?: number, maxAttempts?: number): Promise<PreparedTransactionData>;
    /**
     * Send a transaction with amounts from input addresses.
     * @param params Addresses with amounts.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The sent transaction.
     */
    send(params: SendParams[], transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Send native tokens.
     * @param params Addresses amounts and native tokens.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The sent transaction.
     */
    sendNativeTokens(params: SendNativeTokensParams[], transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Send nft.
     * @param params Addresses and nft ids.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The sent transaction.
     */
    sendNft(params: SendNftParams[], transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Send outputs in a transaction.
     * @param outputs The outputs to send.
     * @param transactionOptions The options to define a `RemainderValueStrategy`
     * or custom inputs.
     * @returns The sent transaction.
     */
    sendOutputs(outputs: OutputTypes[], transactionOptions?: TransactionOptions): Promise<Transaction>;
    /**
     * Set the alias for the account
     * @param alias The account alias to set.
     */
    setAlias(alias: string): Promise<void>;
    /**
     * Set the fallback SyncOptions for account syncing.
     * If storage is enabled, will persist during restarts.
     * @param options The sync options to set.
     */
    setDefaultSyncOptions(options: SyncOptions): Promise<void>;
    /**
     * Sign a prepared transaction, useful for offline signing.
     * @param preparedTransactionData The prepared transaction data to sign.
     * @returns The signed transaction essence.
     */
    signTransactionEssence(preparedTransactionData: PreparedTransactionData): Promise<SignedTransactionEssence>;
    /**
     * Validate the transaction, submit it to a node and store it in the account.
     * @param signedTransactionData A signed transaction to submit and store.
     * @returns The sent transaction.
     */
    submitAndStoreTransaction(signedTransactionData: SignedTransactionEssence): Promise<Transaction>;
    /**
     * Sync the account by fetching new information from the nodes.
     * Will also retry pending transactions if necessary.
     * A custom default can be set using setDefaultSyncOptions.
     *
     * @param options Optional synchronization options.
     * @returns The account balance.
     */
    sync(options?: SyncOptions): Promise<Balance>;
    vote(eventId?: ParticipationEventId, answers?: number[]): Promise<Transaction>;
    stopParticipating(eventId: ParticipationEventId): Promise<Transaction>;
    /**
     * Calculates the voting overview of an account.
     * @param eventIds Optional, filters participations only for provided events.
     * @returns ParticipationOverview
     */
    getParticipationOverview(eventIds?: ParticipationEventId[]): Promise<ParticipationOverview>;
    increaseVotingPower(amount: string): Promise<Transaction>;
    decreaseVotingPower(amount: string): Promise<Transaction>;
}
//# sourceMappingURL=Account.d.ts.map