"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionProgressType = exports.BroadcastingProgress = exports.PerformingPowProgress = exports.SigningTransactionProgress = exports.PreparedTransactionEssenceHashProgress = exports.PreparedTransactionProgress = exports.GeneratingRemainderDepositAddressProgress = exports.SelectingInputsProgress = exports.TransactionProgress = exports.TransactionProgressWalletEvent = exports.TransactionInclusionWalletEvent = exports.SpentOutputWalletEvent = exports.NewOutputWalletEvent = exports.LedgerAddressGenerationWalletEvent = exports.ConsolidationRequiredWalletEvent = exports.WalletEvent = exports.WalletEventType = exports.Event = void 0;
class Event {
    constructor(accountIndex, event) {
        this.accountIndex = accountIndex;
        this.event = event;
    }
}
exports.Event = Event;
/**
 * All of the wallet event types.
 */
var WalletEventType;
(function (WalletEventType) {
    WalletEventType[WalletEventType["ConsolidationRequired"] = 0] = "ConsolidationRequired";
    WalletEventType[WalletEventType["LedgerAddressGeneration"] = 1] = "LedgerAddressGeneration";
    WalletEventType[WalletEventType["NewOutput"] = 2] = "NewOutput";
    WalletEventType[WalletEventType["SpentOutput"] = 3] = "SpentOutput";
    WalletEventType[WalletEventType["TransactionInclusion"] = 4] = "TransactionInclusion";
    WalletEventType[WalletEventType["TransactionProgress"] = 5] = "TransactionProgress";
})(WalletEventType || (WalletEventType = {}));
exports.WalletEventType = WalletEventType;
class WalletEvent {
    constructor(type) {
        this.type = type;
    }
}
exports.WalletEvent = WalletEvent;
class ConsolidationRequiredWalletEvent extends WalletEvent {
    constructor() {
        super(WalletEventType.ConsolidationRequired);
    }
}
exports.ConsolidationRequiredWalletEvent = ConsolidationRequiredWalletEvent;
class LedgerAddressGenerationWalletEvent extends WalletEvent {
    constructor(address) {
        super(WalletEventType.LedgerAddressGeneration);
        this.address = address;
    }
}
exports.LedgerAddressGenerationWalletEvent = LedgerAddressGenerationWalletEvent;
class NewOutputWalletEvent extends WalletEvent {
    constructor(output, transaction, transactionInputs) {
        super(WalletEventType.NewOutput);
        this.output = output;
        this.transaction = transaction;
        this.transactionInputs = transactionInputs;
    }
}
exports.NewOutputWalletEvent = NewOutputWalletEvent;
class SpentOutputWalletEvent extends WalletEvent {
    constructor(output) {
        super(WalletEventType.SpentOutput);
        this.output = output;
    }
}
exports.SpentOutputWalletEvent = SpentOutputWalletEvent;
class TransactionInclusionWalletEvent extends WalletEvent {
    constructor(transactionId, inclusionState) {
        super(WalletEventType.TransactionInclusion);
        this.transactionId = transactionId;
        this.inclusionState = inclusionState;
    }
}
exports.TransactionInclusionWalletEvent = TransactionInclusionWalletEvent;
/**
 * All of the transaction progress types.
 */
var TransactionProgressType;
(function (TransactionProgressType) {
    TransactionProgressType[TransactionProgressType["SelectingInputs"] = 0] = "SelectingInputs";
    TransactionProgressType[TransactionProgressType["GeneratingRemainderDepositAddress"] = 1] = "GeneratingRemainderDepositAddress";
    TransactionProgressType[TransactionProgressType["PreparedTransaction"] = 2] = "PreparedTransaction";
    TransactionProgressType[TransactionProgressType["PreparedTransactionEssenceHash"] = 3] = "PreparedTransactionEssenceHash";
    TransactionProgressType[TransactionProgressType["SigningTransaction"] = 4] = "SigningTransaction";
    TransactionProgressType[TransactionProgressType["PerformingPow"] = 5] = "PerformingPow";
    TransactionProgressType[TransactionProgressType["Broadcasting"] = 6] = "Broadcasting";
})(TransactionProgressType || (TransactionProgressType = {}));
exports.TransactionProgressType = TransactionProgressType;
class TransactionProgressWalletEvent extends WalletEvent {
    constructor(progress) {
        super(WalletEventType.TransactionProgress);
        this.progress = progress;
    }
}
exports.TransactionProgressWalletEvent = TransactionProgressWalletEvent;
class TransactionProgress {
    constructor(type) {
        this.type = type;
    }
}
exports.TransactionProgress = TransactionProgress;
class SelectingInputsProgress extends TransactionProgress {
    constructor() {
        super(TransactionProgressType.SelectingInputs);
    }
}
exports.SelectingInputsProgress = SelectingInputsProgress;
class GeneratingRemainderDepositAddressProgress extends TransactionProgress {
    constructor(address) {
        super(TransactionProgressType.GeneratingRemainderDepositAddress);
        this.address = address;
    }
}
exports.GeneratingRemainderDepositAddressProgress = GeneratingRemainderDepositAddressProgress;
class PreparedTransactionProgress extends TransactionProgress {
    constructor(essence, inputsData, remainder) {
        super(TransactionProgressType.PreparedTransaction);
        this.essence = essence;
        this.inputsData = inputsData;
        this.remainder = remainder;
    }
}
exports.PreparedTransactionProgress = PreparedTransactionProgress;
class PreparedTransactionEssenceHashProgress extends TransactionProgress {
    constructor(hash) {
        super(TransactionProgressType.PreparedTransactionEssenceHash);
        this.hash = hash;
    }
}
exports.PreparedTransactionEssenceHashProgress = PreparedTransactionEssenceHashProgress;
class SigningTransactionProgress extends TransactionProgress {
    constructor() {
        super(TransactionProgressType.SigningTransaction);
    }
}
exports.SigningTransactionProgress = SigningTransactionProgress;
class PerformingPowProgress extends TransactionProgress {
    constructor() {
        super(TransactionProgressType.PerformingPow);
    }
}
exports.PerformingPowProgress = PerformingPowProgress;
class BroadcastingProgress extends TransactionProgress {
    constructor() {
        super(TransactionProgressType.Broadcasting);
    }
}
exports.BroadcastingProgress = BroadcastingProgress;
//# sourceMappingURL=event.js.map