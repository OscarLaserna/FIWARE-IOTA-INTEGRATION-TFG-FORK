"use strict";
// Copyright 2021 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageHandler = void 0;
const bindings_1 = require("./bindings");
const types_1 = require("../types");
// The MessageHandler class interacts with messages with the rust bindings.
class MessageHandler {
    constructor(options) {
        const messageOptions = {
            storagePath: options === null || options === void 0 ? void 0 : options.storagePath,
            clientOptions: options === null || options === void 0 ? void 0 : options.clientOptions,
            coinType: options === null || options === void 0 ? void 0 : options.coinType,
            secretManager: options === null || options === void 0 ? void 0 : options.secretManager,
        };
        this.messageHandler = (0, bindings_1.messageHandlerNew)(JSON.stringify(messageOptions));
    }
    async sendMessage(message) {
        return (0, bindings_1.sendMessageAsync)(JSON.stringify(message), this.messageHandler).catch((error) => {
            try {
                error = JSON.parse(error.toString()).payload;
            }
            catch (e) {
                console.error(e);
            }
            return Promise.reject(error);
        });
    }
    async callAccountMethod(accountIndex, method) {
        return this.sendMessage({
            cmd: 'callAccountMethod',
            payload: {
                accountId: accountIndex,
                method,
            },
        });
    }
    async listen(eventTypes, callback) {
        return (0, bindings_1.listenWallet)(eventTypes, function (err, data) {
            const parsed = JSON.parse(data);
            callback(err, new types_1.Event(parsed.accountIndex, parsed.event));
        }, this.messageHandler);
    }
    async destroy() {
        return (0, bindings_1.destroy)(this.messageHandler);
    }
}
exports.MessageHandler = MessageHandler;
//# sourceMappingURL=MessageHandler.js.map